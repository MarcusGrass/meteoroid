//! Code in this file (mainly HTML) is generated by AI
use crate::analyze::report::{AnalysisReport, CrateReport, FmtOutput};
use crate::unpack;
use anyhow::Context;
use std::path::Path;

impl AnalysisReport {
    pub(crate) fn html_report(mut self) -> anyhow::Result<()> {
        // Generate HTML report
        let html_path = self.output.base.join("report.html");
        self.crate_reports.sort_by(|a, b| b.cmp(a));
        let html_content = self.generate_html();
        std::fs::write(&html_path, html_content)
            .with_context(|| format!("failed to write HTML report to {}", html_path.display()))?;
        tracing::info!("Wrote HTML report to {}", html_path.display());
        Ok(())
    }

    #[allow(clippy::too_many_lines)]
    fn generate_html(&self) -> String {
        let total_reports = self.crate_reports.len();
        let total_upstream =
            self.num_upstream_successes + self.num_upstream_diffs + self.num_upstream_failures;

        format!(
            r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meoteoroid report</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }}
        h1, h2, h3 {{
            color: #333;
        }}
        .summary {{
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }}
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }}
        .stat-box {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            border-left: 4px solid #007bff;
        }}
        .stat-box.success {{
            border-left-color: #28a745;
        }}
        .stat-box.warning {{
            border-left-color: #ffc107;
        }}
        .stat-box.danger {{
            border-left-color: #dc3545;
        }}
        .stat-label {{
            font-size: 0.9em;
            color: #666;
            margin-bottom: 5px;
        }}
        .stat-value {{
            font-size: 2em;
            font-weight: bold;
            color: #333;
        }}
        .crate-report {{
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }}
        .crate-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 15px;
            margin-bottom: 15px;
        }}
        .crate-name {{
            font-size: 1.3em;
            font-weight: bold;
            color: #007bff;
        }}
        .diverged-badge {{
            background: #dc3545;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: bold;
        }}
        .crate-info {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
            font-size: 0.9em;
            color: #666;
        }}
        .info-item {{
            display: flex;
            gap: 8px;
        }}
        .info-label {{
            font-weight: 600;
            color: #495057;
        }}
        .fmt-outputs {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            overflow: hidden;
        }}
        .fmt-section {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            min-width: 0;
            overflow-wrap: break-word;
        }}
        .fmt-section h4 {{
            margin-top: 0;
            color: #495057;
        }}
        .output-item {{
            margin: 10px 0;
            font-size: 0.9em;
        }}
        .output-label {{
            font-weight: 600;
            color: #495057;
        }}
        .file-link {{
            color: #007bff;
            text-decoration: none;
            word-break: break-all;
        }}
        .file-link:hover {{
            text-decoration: underline;
        }}
        .status-success {{
            color: #28a745;
            font-weight: bold;
        }}
        .status-diff {{
            color: #ffc107;
            font-weight: bold;
        }}
        .status-error {{
            color: #dc3545;
            font-weight: bold;
        }}
        .elapsed {{
            color: #6c757d;
            font-size: 0.85em;
        }}
        .collapsible {{
            background-color: #dc3545;
            color: white;
            cursor: pointer;
            padding: 10px;
            width: fit-content;
            max-width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 0.9em;
            border-radius: 4px;
            margin-top: 10px;
            font-weight: 600;
            transition: background-color 0.3s;
            display: inline-block;
        }}
        .collapsible:hover {{
            background-color: #c82333;
        }}
        .collapsible.diff {{
            background-color: #ffc107;
            color: #212529;
        }}
        .collapsible.diff:hover {{
            background-color: #e0a800;
        }}
        .collapsible.meta-diff {{
            background-color: #6f42c1;
            color: white;
        }}
        .collapsible.meta-diff:hover {{
            background-color: #5a32a3;
        }}
        .collapsible:after {{
            content: 'open';
            float: right;
            margin-left: 5px;
            transition: transform 0.3s;
        }}
        .collapsible.active:after {{
            transform: rotate(90deg);
        }}
        .error-content {{
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
            background-color: #fff;
            border: 1px solid #dc3545;
            border-top: none;
            border-radius: 0 0 4px 4px;
        }}
        .error-content-inner {{
            padding: 15px;
        }}
        .error-content pre {{
            margin: 0;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            overflow-x: auto;
            font-family: 'Courier New', Consolas, monospace;
            font-size: 0.85em;
            line-height: 1.4;
            color: #dc3545;
        }}
        .diff-content {{
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
            background-color: #fff;
            border: 1px solid #ffc107;
            border-top: none;
            border-radius: 0 0 4px 4px;
        }}
        .diff-content-inner {{
            padding: 15px;
        }}
        .diff-content pre {{
            margin: 0;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            overflow-x: auto;
            font-family: 'Courier New', Consolas, monospace;
            font-size: 0.85em;
            line-height: 1.4;
            color: #212529;
        }}
        .meta-diff-content {{
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
            background-color: #fff;
            border: 1px solid #6f42c1;
            border-top: none;
            border-radius: 0 0 4px 4px;
        }}
        .meta-diff-content-inner {{
            padding: 15px;
        }}
        .meta-diff-content pre {{
            margin: 0;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            overflow-x: auto;
            font-family: 'Courier New', Consolas, monospace;
            font-size: 0.85em;
            line-height: 1.4;
            color: #212529;
        }}
        @media (max-width: 768px) {{
            .fmt-outputs {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
    <script>
        function toggleError(button) {{
            button.classList.toggle('active');
            var content = button.nextElementSibling;
            if (content.style.maxHeight) {{
                content.style.maxHeight = null;
            }} else {{
                content.style.maxHeight = content.scrollHeight + 'px';
            }}
        }}
        
        function toggleDiff(button) {{
            button.classList.toggle('active');
            var content = button.nextElementSibling;
            if (content.style.maxHeight) {{
                content.style.maxHeight = null;
            }} else {{
                content.style.maxHeight = content.scrollHeight + 'px';
            }}
        }}
        
        function toggleMetaDiff(button) {{
            button.classList.toggle('active');
            var content = button.nextElementSibling;
            if (content.style.maxHeight) {{
                content.style.maxHeight = null;
            }} else {{
                content.style.maxHeight = content.scrollHeight + 'px';
            }}
        }}
    </script>
</head>
<body>
    <h1>🦀 Rustfmt Analysis Report</h1>

    <div class="summary">
        <h2>Summary</h2>
        <div class="stats-grid">
            <div class="stat-box danger">
                <div class="stat-label">Diverging diffs</div>
                <div class="stat-value">{}</div>
            </div>
            <div class="stat-box">
                <div class="stat-label">Total crates analyzed</div>
                <div class="stat-value">{}</div>
            </div>
        </div>

        <h3 style="margin-top: 30px;">Local results</h3>
        <div class="stats-grid">
            <div class="stat-box success">
                <div class="stat-label">Successes</div>
                <div class="stat-value">{}</div>
            </div>
            <div class="stat-box warning">
                <div class="stat-label">Diffs</div>
                <div class="stat-value">{}</div>
            </div>
            <div class="stat-box danger">
                <div class="stat-label">Failures</div>
                <div class="stat-value">{}</div>
            </div>
        </div>

        <h3 style="margin-top: 30px;">Upstream results</h3>
        <div class="stats-grid">
            <div class="stat-box success">
                <div class="stat-label">Successes</div>
                <div class="stat-value">{}</div>
            </div>
            <div class="stat-box warning">
                <div class="stat-label">Diffs</div>
                <div class="stat-value">{}</div>
            </div>
            <div class="stat-box danger">
                <div class="stat-label">Failures</div>
                <div class="stat-value">{}</div>
            </div>
        </div>

    </div>

    <h2>Crate Reports ({})</h2>
    {}
</body>
</html>"#,
            self.num_diverging_diffs,
            total_upstream,
            self.num_upstream_successes,
            self.num_upstream_diffs,
            self.num_upstream_failures,
            self.num_local_successes,
            self.num_local_diffs,
            self.num_local_failures,
            total_reports,
            self.generate_crate_reports_html()
        )
    }

    fn generate_crate_reports_html(&self) -> String {
        self.crate_reports
            .iter()
            .map(Self::generate_crate_report_html)
            .collect::<Vec<_>>()
            .join("\n")
    }

    #[allow(clippy::too_many_lines)]
    fn generate_crate_report_html(report: &CrateReport) -> String {
        let mut has_identical_diffs = false;
        let shared_diff_section = if !report.diverged
            && !report.has_error()
            && report.has_diff()
            && let Some(local) = report.local_rustfmt_output.diff_output_file.as_ref()
        {
            let content = std::fs::read_to_string(local).map_or_else(
                |e| {
                    tracing::error!(
                        "failed to read diff at {} when constructing html report: {}",
                        local.display(),
                        unpack(&e)
                    );
                    None
                },
                Some,
            );
            if let Some(content) = content.as_ref() {
                has_identical_diffs = true;
                Self::generate_shared_diff_html(content)
            } else {
                String::new()
            }
        } else {
            String::new()
        };

        let mut has_similar_errors = false;
        let shared_error_section = if report.similar_errors
            && let Some(local) = report.local_rustfmt_output.error_output_file.as_ref()
        {
            let content = std::fs::read_to_string(local).map_or_else(
                |e| {
                    tracing::error!(
                        "failed to read error at {} when constructing html report: {}",
                        local.display(),
                        unpack(&e)
                    );
                    None
                },
                Some,
            );
            if let Some(content) = content.as_ref() {
                has_similar_errors = true;
                Self::generate_shared_error_html(content)
            } else {
                String::new()
            }
        } else {
            String::new()
        };

        let meta_diff_section = if let Some(meta_diff_file) = &report.meta_diff_file {
            Self::generate_meta_diff_html(meta_diff_file)
        } else {
            String::new()
        };

        format!(
            r#"<div class="crate-report">
        <div class="crate-header">
            <div class="crate-name">{}</div>
            {}
        </div>
        <div class="crate-info">
            <div class="info-item">
                <span class="info-label">Repository:</span>
                <a href="{}" target="_blank" class="file-link">{}</a>
            </div>
            <div class="info-item">
                <span class="info-label">Branch:</span>
                <span>{}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Local path:</span>
                <span>{}</span>
            </div>
        </div>
        <div class="fmt-outputs">
            {}
            {}
        </div>
        {}
        {}
        {}
    </div>"#,
            report.crate_name,
            if report.diverged {
                r#"<span class="diverged-badge">DIVERGED</span>"#
            } else {
                ""
            },
            report.repo_url,
            report.repo_url,
            report.head_branch,
            report.local_root,
            Self::generate_fmt_output_html(
                "Local rustfmt",
                &report.local_rustfmt_output,
                has_identical_diffs,
                has_similar_errors
            ),
            Self::generate_fmt_output_html(
                "Upstream rustfmt",
                &report.upstream_rustfmt_output,
                has_identical_diffs,
                has_similar_errors
            ),
            shared_diff_section,
            shared_error_section,
            meta_diff_section
        )
    }

    fn generate_shared_diff_html(diff_content: &str) -> String {
        let escaped_content = html_escape(diff_content);
        format!(
            r#"<div style="margin-top: 20px; grid-column: 1 / -1;">
            <div style="background: #e7f3ff; padding: 15px; border-radius: 6px; border-left: 4px solid #007bff;">
                <h4 style="margin-top: 0; color: #0056b3;">📝 Shared Diff (identical for both local and upstream)</h4>
                <button class="collapsible diff" onclick="toggleDiff(this)" style="margin-top: 10px;">Show diff</button>
                <div class="diff-content">
                    <div class="diff-content-inner">
                        <pre>{escaped_content}</pre>
                    </div>
                </div>
            </div>
        </div>"#
        )
    }

    fn generate_shared_error_html(error_content: &str) -> String {
        let escaped_content = html_escape(error_content);
        format!(
            r#"<div style="margin-top: 20px; grid-column: 1 / -1;">
            <div style="background: #ffe7e7; padding: 15px; border-radius: 6px; border-left: 4px solid #dc3545;">
                <h4 style="margin-top: 0; color: #a71d2a;">❌ Shared Error (similar for both local and upstream)</h4>
                <button class="collapsible" onclick="toggleError(this)" style="margin-top: 10px;">Show error details</button>
                <div class="error-content">
                    <div class="error-content-inner">
                        <pre>{escaped_content}</pre>
                    </div>
                </div>
            </div>
        </div>"#
        )
    }

    fn generate_meta_diff_html(meta_diff_file: &Path) -> String {
        let content = match std::fs::read_to_string(meta_diff_file) {
            Ok(cnt) => cnt,
            Err(e) => {
                tracing::error!(
                    "failed to read meta diff file at {:?} when constructing html report: {}",
                    meta_diff_file,
                    unpack(&e)
                );
                return String::new();
            }
        };

        let escaped_content = html_escape(&content);
        format!(
            r#"<div style="margin-top: 20px; grid-column: 1 / -1;">
            <button class="collapsible meta-diff" onclick="toggleMetaDiff(this)">Show meta diff (difference between local and upstream diffs)</button>
            <div class="meta-diff-content">
                <div class="meta-diff-content-inner">
                    <pre>{escaped_content}</pre>
                </div>
            </div>
        </div>"#
        )
    }

    #[allow(clippy::too_many_lines)]
    fn generate_fmt_output_html(
        title: &str,
        output: &FmtOutput,
        skip_diff_content: bool,
        skip_error_content: bool,
    ) -> String {
        let (status, error_content, diff_content) = if let Some(error_file) =
            output.error_output_file.as_ref()
        {
            // Only read error content if we're not skipping it (i.e., not showing shared error)
            let content = if skip_error_content {
                None
            } else {
                match std::fs::read_to_string(error_file) {
                    Ok(cnt) => Some(cnt),
                    Err(e) => {
                        tracing::error!(
                            "failed to read file at {error_file:?} when constructing html report: {}",
                            unpack(&e)
                        );
                        None
                    }
                }
            };
            (
                r#"<span class="status-error">❌ Error</span>"#,
                content,
                None,
            )
        } else if let Some(diff_file) = output.diff_output_file.as_ref() {
            // Only read diff content if we're not skipping it (i.e., not showing shared diff)
            let content = if skip_diff_content {
                None
            } else {
                match std::fs::read_to_string(diff_file) {
                    Ok(cnt) => Some(cnt),
                    Err(e) => {
                        tracing::error!(
                            "failed to read file at {diff_file:?} when constructing html report: {}",
                            unpack(&e)
                        );
                        None
                    }
                }
            };
            (r#"<span class="status-diff">⚠️ Diff</span>"#, None, content)
        } else {
            (
                r#"<span class="status-success">✓ Success</span>"#,
                None,
                None,
            )
        };

        let error_section = if let Some(content) = error_content {
            let escaped_content = html_escape(&content);
            format!(
                r#"<button class="collapsible" onclick="toggleError(this)">Show error details</button>
                <div class="error-content">
                    <div class="error-content-inner">
                        <pre>{escaped_content}</pre>
                    </div>
                </div>"#,
            )
        } else {
            String::new()
        };

        let diff_section = if let Some(content) = diff_content {
            let escaped_content = html_escape(&content);
            format!(
                r#"<button class="collapsible diff" onclick="toggleDiff(this)">Show diff</button>
                <div class="diff-content">
                    <div class="diff-content-inner">
                        <pre>{escaped_content}</pre>
                    </div>
                </div>"#,
            )
        } else {
            String::new()
        };

        let diff_link_note = if skip_diff_content && output.diff_output_file.is_some() {
            r#"<div class="output-item" style="font-style: italic; color: #6c757d;">
                (Diff content shown in shared section below)
            </div>"#
        } else {
            ""
        };

        let error_link_note = if skip_error_content && output.error_output_file.is_some() {
            r#"<div class="output-item" style="font-style: italic; color: #6c757d;">
                (Error content shown in shared section below)
            </div>"#
        } else {
            ""
        };

        format!(
                r#"<div class="fmt-section">
                <h4>{title}</h4>
                <div class="output-item">
                    <span class="output-label">Status:</span> {status}
                </div>
                <div class="output-item">
                    <span class="output-label">Elapsed:</span> <span class="elapsed">{}</span>
                </div>
                {}
                {}
                {}
                {}
                {}
                {}
            </div>"#,
                output.elapsed,
                output.diff_output_file.as_ref().map(|f| format!(
                    r#"<div class="output-item">
                    <span class="output-label">Diff:</span> <a href="{FILE}" class="file-link">{FILE}</a>
                </div>"#, FILE=f.display()
                )).unwrap_or_default(),
                output.error_output_file.as_ref().map(|f| format!(
                    r#"<div class="output-item">
                    <span class="output-label">Error file:</span> <a href="{FILE}" class="file-link">{FILE}</a>
                </div>"#, FILE=f.display()
                )).unwrap_or_default(),
                diff_link_note,
                error_link_note,
                diff_section,
                error_section
            )
    }
}

/// This was written by AI, I'm keeping it but it shouldn't be used for anything
/// non-trivial without actually looking into proper html escapes.
fn html_escape(s: &str) -> String {
    s.replace('&', "&amp;")
        .replace('<', "&lt;")
        .replace('>', "&gt;")
        .replace('"', "&quot;")
        .replace('\'', "&#39;")
}
